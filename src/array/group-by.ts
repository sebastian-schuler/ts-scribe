/**
 * Type for a function that returns a key from an object.
 */
export type ArrGroupByKeyFn<T> = (item: T) => string | number;

/**
 * Groups the elements of an array by a specified key generated from each element.
 *
 * This function iterates over the provided array and uses a key-generating function
 * (`keyFunc`) to determine the key for each element. The result is an object where
 * each key is associated with an array of elements that share the same key.
 *
 * @param {T[]} array - The array to group.
 * @param {ArrGroupByKeyFn<T>} keyFunc - The function to generate a key for each element.
 * @returns {Record<string | number, T[]>} An object where keys are generated by `keyFunc` and the values are arrays of elements that share the same key.
 *
 * @example
 * const arr = [
 *   { id: 1, name: 'Alice' },
 *   { id: 2, name: 'Bob' },
 *   { id: 1, name: 'Charlie' },
 * ];
 * const grouped = arrGroupBy(arr, (item) => item.id);
 * console.log(grouped);
 * // Output: { 1: [{ id: 1, name: 'Alice' }, { id: 1, name: 'Charlie' }], 2: [{ id: 2, name: 'Bob' }] }
 */
export function arrGroupBy<T>(array: T[], keyFunc: ArrGroupByKeyFn<T>): Record<string | number, T[]> {
  return array.reduce((result: Record<string | number, T[]>, currentValue: T) => {
    const key = keyFunc(currentValue);
    if (!result[key]) {
      result[key] = [];
    }
    result[key].push(currentValue);
    return result;
  }, {});
}
